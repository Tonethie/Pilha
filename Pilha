#define TAM 		4
#define FIM 		TAM-1
#define INICIO 		0

#define OVERFLOW 	1
#define UNDERFLOW 	2
#define OK			3

#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
typedef struct Pixel {
	unsigned char p; //0 é fundo, 1 é pixel
	unsigned char v; //1 já foi visitado
}tPixel;
typedef struct Pos {
	int x;
	int y;
	struct Pos *ant;
}tPos;
typedef struct Pilha { //salva os pixels na pilha e a posição do topo
	int quant; // quantas posições existem na pilha
	struct Pos *top;
}tPilha;

struct Pilha *criaPilha(int *resultado);
void push(int x, int y, struct Pilha *pilha, int *resultado);
void pop(struct Pilha *pilha, struct Pos *p, int *resultado);

int main()
{
	char op;
	int sair = 0;
	int res;

	tPilha *pilha = criaPilha(&res);
	tPos *pos;

	for (; sair == 0;)
	{
		printf("1 -> Insere na pilha\n2 -> Remove da pilha\n");
		printf("3 -> Listar pilha\n4 -> Sair da pilha\n");
		printf("\nDigite uma opção: ");
		scanf(" %c", &op);
		switch (op)
		{
		case '1': push(20, 10, pilha, &res); break;
		case '2': pop(pilha, pos, &res); break;
		case '3': listar(); break;
		case '4': sair = 1; break;
		default: {
			printf("Opção invalida! \n");
			getchar();
			break;
		}

		}
	}
	return 0;
}

void push(int x, int y, struct Pilha *pilha, int *resultado) {
	struct Pos *p = (struct Pos *)malloc(sizeof(struct Pos));
	if (p == NULL) *resultado = 0;
	else {
		p->x = x;
		p->y = y;
		if (pilha->top == NULL) {
			p->ant = NULL;
			pilha->top = p;
		}
		else {
			p->ant = pilha->top;
			pilha->top = p;
		}
		pilha->quant++;
		*resultado = OK;
	}
}
void pop(struct Pilha *pilha, struct Pos *p, int *resultado) {
	struct Pos *aux;
	if (pilha->top == NULL) {
		*resultado = UNDERFLOW;
	}
	else {
		aux = pilha->top;
		p->x = aux->x;
		p->y = aux->y;
		pilha->top = aux->ant;
		pilha->quant++;
		free(aux);
	}
}
